// /**
//  * Basic sample plugin inserting current date and time into the CKEditor editing area.
//  */
// (function ($, Drupal, CKEDITOR) {
//   // Register the plugin within the editor.
//   CKEDITOR.plugins.add('glossarylink', {
//     // Register the icons. They must match command names.
//     icons: 'glossarylink',

//     // The plugin initialization logic goes inside this method.
//     init: function (editor) {
//       // Define the editor command
//       editor.addCommand('insertGlossarylink', {
//         // Define the function that will be fired when the command is executed.
//         exec: function (editor) {
//           editor.insertHtml('<a href="/test" class="glossary-link">Tetst</a>');
//         }
//       });

//       // Create the toolbar button that executes the above command.
//       editor.ui.addButton('Glossarylink', {
//         label: 'Insert Glossary Link',
//         command: 'insertGlossarylink',
//         toolbar: 'insert'
//       });
//     }
//   });
// })(jQuery, Drupal, CKEDITOR);



/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, drupalSettings, CKEDITOR) {
  function parseAttributes(editor, element) {
    var parsedAttributes = {};
    var domElement = element.$;
    var attribute;
    var attributeName;

    for (var attrIndex = 0; attrIndex < domElement.attributes.length; attrIndex++) {
      attribute = domElement.attributes.item(attrIndex);
      attributeName = attribute.nodeName.toLowerCase();

      if (attributeName.indexOf('data-cke-') === 0) {
        continue;
      }

      parsedAttributes[attributeName] = element.data("cke-saved-".concat(attributeName)) || attribute.nodeValue;
    }

    if (parsedAttributes.class) {
      parsedAttributes.class = CKEDITOR.tools.trim(parsedAttributes.class.replace(/cke_\S+/, ''));
    }

    return parsedAttributes;
  }

  function getAttributes(editor, data) {
    var set = {};
    Object.keys(data || {}).forEach(function (attributeName) {
      set[attributeName] = data[attributeName];
    });
    set['data-cke-saved-href'] = set.href;
    var removed = {};
    Object.keys(set).forEach(function (s) {
      delete removed[s];
    });
    return {
      set: set,
      removed: CKEDITOR.tools.objectKeys(removed)
    };
  }

  var registeredLinkableWidgets = [];

  function registerLinkableWidget(widgetName) {
    registeredLinkableWidgets.push(widgetName);
  }

  function getFocusedLinkableWidget(editor) {
    var widget = editor.widgets.focused;

    if (widget && registeredLinkableWidgets.indexOf(widget.name) !== -1) {
      return widget;
    }

    return null;
  }

  function getSelectedLink(editor) {
    var selection = editor.getSelection();
    var selectedElement = selection.getSelectedElement();

    if (selectedElement && selectedElement.is('a')) {
      return selectedElement;
    }

    var range = selection.getRanges(true)[0];

    if (range) {
      range.shrink(CKEDITOR.SHRINK_TEXT);
      return editor.elementPath(range.getCommonAncestor()).contains('a', 1);
    }

    return null;
  }

  CKEDITOR.plugins.add('glossarylink', {
    icons: 'glossarylink',
    hidpi: true,
    init: function init(editor) {
      editor.addCommand('glossarylink', {
        allowedContent: {
          a: {
            attributes: {
              '!href': true
            },
            classes: {}
          }
        },
        requiredContent: new CKEDITOR.style({
          element: 'a',
          attributes: {
            href: ''
          }
        }),
        modes: {
          wysiwyg: 1
        },
        canUndo: true,
        exec: function exec(editor) {
          var focusedLinkableWidget = getFocusedLinkableWidget(editor);
          var linkElement = getSelectedLink(editor);
          var existingValues = {};

          if (linkElement && linkElement.$) {
            existingValues = parseAttributes(editor, linkElement);
          } else if (focusedLinkableWidget && focusedLinkableWidget.data.link) {
              existingValues = CKEDITOR.tools.clone(focusedLinkableWidget.data.link);
            }

          var saveCallback = function saveCallback(returnValues) {
            if (focusedLinkableWidget) {
              focusedLinkableWidget.setData('link', CKEDITOR.tools.extend(returnValues.attributes, focusedLinkableWidget.data.link));
              editor.fire('saveSnapshot');
              return;
            }

            editor.fire('saveSnapshot');

            if (!linkElement && returnValues.attributes.href) {
              var selection = editor.getSelection();
              var range = selection.getRanges(1)[0];

              if (range.collapsed) {
                var text = new CKEDITOR.dom.text(returnValues.attributes.href.replace(/^mailto:/, ''), editor.document);
                range.insertNode(text);
                range.selectNodeContents(text);
              }

              var style = new CKEDITOR.style({
                element: 'a',
                attributes: returnValues.attributes
              });
              style.type = CKEDITOR.STYLE_INLINE;
              style.applyToRange(range);
              range.select();
              linkElement = getSelectedLink(editor);

              // ensuring "glossary-link" class is added
              linkElement.$.classList.add('glossary-link');

            } else if (linkElement) {
                Object.keys(returnValues.attributes || {}).forEach(function (attrName) {
                  if (returnValues.attributes[attrName].length > 0) {
                    var value = returnValues.attributes[attrName];
                    linkElement.data("cke-saved-".concat(attrName), value);
                    linkElement.setAttribute(attrName, value);
                  } else {
                    linkElement.removeAttribute(attrName);
                  }
                });
              }

            editor.fire('saveSnapshot');
          };

          var dialogSettings = {
            title: linkElement ? editor.config.drupalLink_dialogTitleEdit : editor.config.drupalLink_dialogTitleAdd,
            dialogClass: 'editor-link-dialog'
          };
          Drupal.ckeditor.openDialog(editor, Drupal.url("editor/dialog/link/".concat(editor.config.drupal.format)), existingValues, saveCallback, dialogSettings);
        }
      });

      if (editor.ui.addButton) {
        editor.ui.addButton('Glossarylink', {
          label: Drupal.t('Insert Glossary Link'),
          command: 'glossarylink'
        });
      }

      editor.on('doubleclick', function (evt) {
        var element = getSelectedLink(editor) || evt.data.element;

        if (!element.isReadOnly()) {
          if (element.is('a')) {
            editor.getSelection().selectElement(element);
            editor.getCommand('glossarylink').exec();
          }
        }
      });

      if (editor.contextMenu) {
        editor.contextMenu.addListener(function (element, selection) {
          if (!element || element.isReadOnly()) {
            return null;
          }

          var anchor = getSelectedLink(editor);

          if (!anchor) {
            return null;
          }

          var menu = {};

          if (anchor.getAttribute('href') && anchor.getChildCount()) {
            menu = {
              link: CKEDITOR.TRISTATE_OFF,
              unlink: CKEDITOR.TRISTATE_OFF
            };
          }

          return menu;
        });
      }
    }
  });
  CKEDITOR.plugins.glossarylink = {
    parseLinkAttributes: parseAttributes,
    getLinkAttributes: getAttributes,
    registerLinkableWidget: registerLinkableWidget
  };
})(jQuery, Drupal, drupalSettings, CKEDITOR);